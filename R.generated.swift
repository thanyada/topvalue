//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 5 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: บัญชี
      ///
      /// Key: ACCOUNT_TABBAR_TITLE
      ///
      /// Locales: en, th
      var account_TABBAR_TITLE: RswiftResources.StringResource { .init(key: "ACCOUNT_TABBAR_TITLE", tableName: "Localizable", source: source, developmentValue: "บัญชี", comment: nil) }

      /// en translation: รถเข็น
      ///
      /// Key: CART_TABBAR_TITLE
      ///
      /// Locales: en, th
      var cart_TABBAR_TITLE: RswiftResources.StringResource { .init(key: "CART_TABBAR_TITLE", tableName: "Localizable", source: source, developmentValue: "รถเข็น", comment: nil) }

      /// en translation: หมวดหมู่
      ///
      /// Key: CATEGORY_TABBAR_TITLE
      ///
      /// Locales: en, th
      var category_TABBAR_TITLE: RswiftResources.StringResource { .init(key: "CATEGORY_TABBAR_TITLE", tableName: "Localizable", source: source, developmentValue: "หมวดหมู่", comment: nil) }

      /// en translation: หน้าหลัก
      ///
      /// Key: HOME_TABBAR_TITLE
      ///
      /// Locales: en, th
      var home_TABBAR_TITLE: RswiftResources.StringResource { .init(key: "HOME_TABBAR_TITLE", tableName: "Localizable", source: source, developmentValue: "หน้าหลัก", comment: nil) }

      /// en translation: สินค้าโปรด
      ///
      /// Key: WISHLIST_TABBAR_TITLE
      ///
      /// Locales: en, th
      var wishlist_TABBAR_TITLE: RswiftResources.StringResource { .init(key: "WISHLIST_TABBAR_TITLE", tableName: "Localizable", source: source, developmentValue: "สินค้าโปรด", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 10 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `ic-account-tabbar-normol`.
    var icAccountTabbarNormol: RswiftResources.ImageResource { .init(name: "ic-account-tabbar-normol", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-account-tabbar-selected`.
    var icAccountTabbarSelected: RswiftResources.ImageResource { .init(name: "ic-account-tabbar-selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-cart-tabbar-normol`.
    var icCartTabbarNormol: RswiftResources.ImageResource { .init(name: "ic-cart-tabbar-normol", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-cart-tabbar-selected`.
    var icCartTabbarSelected: RswiftResources.ImageResource { .init(name: "ic-cart-tabbar-selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-cartgory-tabbar-normol`.
    var icCartgoryTabbarNormol: RswiftResources.ImageResource { .init(name: "ic-cartgory-tabbar-normol", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-cartgory-tabbar-selected`.
    var icCartgoryTabbarSelected: RswiftResources.ImageResource { .init(name: "ic-cartgory-tabbar-selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-home-tabbar-normal`.
    var icHomeTabbarNormal: RswiftResources.ImageResource { .init(name: "ic-home-tabbar-normal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-home-tabbar-selected`.
    var icHomeTabbarSelected: RswiftResources.ImageResource { .init(name: "ic-home-tabbar-selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-wishlist-tabbar-normol`.
    var icWishlistTabbarNormol: RswiftResources.ImageResource { .init(name: "ic-wishlist-tabbar-normol", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-wishlist-tabbar-selected`.
    var icWishlistTabbarSelected: RswiftResources.ImageResource { .init(name: "ic-wishlist-tabbar-selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Main" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `SukhumvitSet-Bold`.
    var sukhumvitSetBold: RswiftResources.FontResource { .init(name: "SukhumvitSet-Bold", bundle: bundle, filename: "SukhumvitSet-Bold.ttf") }

    /// Font `SukhumvitSet-Light`.
    var sukhumvitSetLight: RswiftResources.FontResource { .init(name: "SukhumvitSet-Light", bundle: bundle, filename: "SukhumvitSet-Light.ttf") }

    /// Font `SukhumvitSet-Medium`.
    var sukhumvitSetMedium: RswiftResources.FontResource { .init(name: "SukhumvitSet-Medium", bundle: bundle, filename: "SukhumvitSet-Medium.ttf") }

    /// Font `SukhumvitSet-SemiBold`.
    var sukhumvitSetSemiBold: RswiftResources.FontResource { .init(name: "SukhumvitSet-SemiBold", bundle: bundle, filename: "SukhumvitSet-SemiBold.ttf") }

    /// Font `SukhumvitSet-Text`.
    var sukhumvitSetText: RswiftResources.FontResource { .init(name: "SukhumvitSet-Text", bundle: bundle, filename: "SukhumvitSet-Text.ttf") }

    /// Font `SukhumvitSet-Thin`.
    var sukhumvitSetThin: RswiftResources.FontResource { .init(name: "SukhumvitSet-Thin", bundle: bundle, filename: "SukhumvitSet-Thin.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [sukhumvitSetBold, sukhumvitSetLight, sukhumvitSetMedium, sukhumvitSetSemiBold, sukhumvitSetText, sukhumvitSetThin].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 8 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Staging-Info.plist`.
    var stagingInfoPlist: RswiftResources.FileResource { .init(name: "Staging-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SukhumvitSet-Bold.ttf`.
    var sukhumvitSetBoldTtf: RswiftResources.FileResource { .init(name: "SukhumvitSet-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SukhumvitSet-Light.ttf`.
    var sukhumvitSetLightTtf: RswiftResources.FileResource { .init(name: "SukhumvitSet-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SukhumvitSet-Medium.ttf`.
    var sukhumvitSetMediumTtf: RswiftResources.FileResource { .init(name: "SukhumvitSet-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SukhumvitSet-SemiBold.ttf`.
    var sukhumvitSetSemiBoldTtf: RswiftResources.FileResource { .init(name: "SukhumvitSet-SemiBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SukhumvitSet-Text.ttf`.
    var sukhumvitSetTextTtf: RswiftResources.FileResource { .init(name: "SukhumvitSet-Text", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SukhumvitSet-Thin.ttf`.
    var sukhumvitSetThinTtf: RswiftResources.FileResource { .init(name: "SukhumvitSet-Thin", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var account: account { .init(bundle: bundle) }
    var cart: cart { .init(bundle: bundle) }
    var category: category { .init(bundle: bundle) }
    var home: home { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var wishlist: wishlist { .init(bundle: bundle) }

    func account(bundle: Foundation.Bundle) -> account {
      .init(bundle: bundle)
    }
    func cart(bundle: Foundation.Bundle) -> cart {
      .init(bundle: bundle)
    }
    func category(bundle: Foundation.Bundle) -> category {
      .init(bundle: bundle)
    }
    func home(bundle: Foundation.Bundle) -> home {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func wishlist(bundle: Foundation.Bundle) -> wishlist {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.account.validate()
      try self.cart.validate()
      try self.category.validate()
      try self.home.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.wishlist.validate()
    }


    /// Storyboard `Account`.
    struct account: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = AccountViewController

      let bundle: Foundation.Bundle

      let name = "Account"

      var accountViewController: RswiftResources.StoryboardViewControllerIdentifier<AccountViewController> { .init(identifier: "AccountViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if accountViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'accountViewController' could not be loaded from storyboard 'Account' as 'AccountViewController'.") }
      }
    }

    /// Storyboard `Cart`.
    struct cart: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = CartViewController

      let bundle: Foundation.Bundle

      let name = "Cart"

      var cartViewController: RswiftResources.StoryboardViewControllerIdentifier<CartViewController> { .init(identifier: "CartViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if cartViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'cartViewController' could not be loaded from storyboard 'Cart' as 'CartViewController'.") }
      }
    }

    /// Storyboard `Category`.
    struct category: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = CategoryViewController

      let bundle: Foundation.Bundle

      let name = "Category"

      var categoryViewController: RswiftResources.StoryboardViewControllerIdentifier<CategoryViewController> { .init(identifier: "CategoryViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if categoryViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'categoryViewController' could not be loaded from storyboard 'Category' as 'CategoryViewController'.") }
      }
    }

    /// Storyboard `Home`.
    struct home: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = HomeViewController

      let bundle: Foundation.Bundle

      let name = "Home"

      var homeViewController: RswiftResources.StoryboardViewControllerIdentifier<HomeViewController> { .init(identifier: "HomeViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if homeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = MainViewController

      let bundle: Foundation.Bundle

      let name = "Main"
      func validate() throws {

      }
    }

    /// Storyboard `Wishlist`.
    struct wishlist: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = WishlistViewController

      let bundle: Foundation.Bundle

      let name = "Wishlist"

      var wishlistViewController: RswiftResources.StoryboardViewControllerIdentifier<WishlistViewController> { .init(identifier: "WishlistViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if wishlistViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'wishlistViewController' could not be loaded from storyboard 'Wishlist' as 'WishlistViewController'.") }
      }
    }
  }
}